import PropTypes from 'prop-types';
import { useEffect } from 'react';
import Head from 'next/head';
import { useDispatch, useSelector } from 'react-redux';
import { enquireScreen } from 'enquire-js';
import { ThemeProvider } from '@mui/material/styles';
import theme from '@/theme';
import DefalutLayout from '@/layouts/defalut';
import ErrorLayout from '@/layouts/error';
import GlobalStyles from '@/styles/globals';
import Message from '@/components/Message';
import { wrapper } from '@/redux/index';

// https://ithelp.ithome.com.tw/articles/10269342
// https://vercel.com/archer102125220/resume-web

function NextApp({ Component, pageProps, router }) {
  const dispatch = useDispatch();
  const messageState = useSelector((state) => state.system.message);

  useEffect(() => {
    const jssStyles = document.querySelector('#jss-server-side');
    if (jssStyles) {
      jssStyles.parentElement?.removeChild(jssStyles);
    }

    const systemEnquireScreen = (payload, callback) => dispatch({ type: 'system/SAVE_is_mobile', payload, callback });

    function windowWidthListener() {
      enquireScreen(
        (mobile) => {
          systemEnquireScreen(mobile ? true : false);
        } /*, '(max-width: 1024px)' */
      );
    }

    windowWidthListener();
    window.addEventListener('resize', windowWidthListener);
    return () => window.removeEventListener('resize', windowWidthListener);
  }, []);

  function LayoutSwitch({ route }) {
    if (route === '/404') {
      return ErrorLayout;
    }
    return DefalutLayout;
  }

  const Layout = LayoutSwitch(router);

  return (
    <ThemeProvider theme={theme}>
      <Head>
        <GlobalStyles />
        <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="initial-scale=1, width=device-width" />
        <meta name="description" content="Generated by create next app" />
        <meta name="theme-color" content={theme.palette.primary.main} />
      </Head>
      <Layout {...pageProps}>
        <Component {...pageProps} />
        <Message messageState={messageState} />
      </Layout>
    </ThemeProvider>
  );
}

export default wrapper.withRedux(NextApp);

NextApp.propTypes = {
  Component: PropTypes.elementType.isRequired,
  pageProps: PropTypes.object.isRequired,
  router: PropTypes.object,
  err: PropTypes.object
};